#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'example_types'

module Counter
  class Client
    include ::Thrift::Client

    def increment(number)
      send_increment(number)
      recv_increment()
    end

    def send_increment(number)
      send_message('increment', Increment_args, :number => number)
    end

    def recv_increment()
      result = receive_message(Increment_result)
      return
    end

    def getCounter()
      send_getCounter()
      return recv_getCounter()
    end

    def send_getCounter()
      send_message('getCounter', GetCounter_args)
    end

    def recv_getCounter()
      result = receive_message(GetCounter_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCounter failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_increment(seqid, iprot, oprot)
      args = read_args(iprot, Increment_args)
      result = Increment_result.new()
      @handler.increment(args.number)
      write_result(result, oprot, 'increment', seqid)
    end

    def process_getCounter(seqid, iprot, oprot)
      args = read_args(iprot, GetCounter_args)
      result = GetCounter_result.new()
      result.success = @handler.getCounter()
      write_result(result, oprot, 'getCounter', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Increment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUMBER = 1

    FIELDS = {
      NUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'number'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Increment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCounter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCounter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

